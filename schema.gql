type Employee {
  id: Int
  firstName: String
  lastName: String
  password: String
  email: String
  dateOfBirth: String
  departmentId: Int
  position: Position
}

enum Position {
    JUNIOR
    SENIOR
    DEVELOPER
}


input EmployeeFilter {
  departmentIdEquals: Int
  positionEquals: PositionEnum
}

input CreateEmployee {
  firstName: String!
  lastName: String!
  username: String!
  password: String!
  email: String!
  dateOfBirth: String!
  departmentId: Int!
  position: PositionEnum!
}

input UpdateEmployee {
  id: Int!
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  dateOfBirth: String
  departmentId: Int
  position: PositionEnum
}

enum EmployeeSort {
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
}

type Query {
  employees(filter: EmployeeFilter, sort: EmployeeSort, amount: Int, page: Int): [Employee]
  employee(id: Int): EmployeeType
}

type Mutation {
  createEmployee(input: CreateEmployee!): String
  updateEmployee(input: UpdateEmployee!): String
  deleteEmployee(id: Int!): Boolean
}
